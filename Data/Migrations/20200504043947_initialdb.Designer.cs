// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentCars.Data;

namespace RentCars.Migrations
{
    [DbContext(typeof(RentContext))]
    [Migration("20200504043947_initialdb")]
    partial class initialdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RentCars.Data.Asigurare", b =>
                {
                    b.Property<int>("AsigId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientDataClientId");

                    b.Property<int>("Level");

                    b.Property<string>("NumeAsig");

                    b.Property<int?>("RentCarId");

                    b.HasKey("AsigId");

                    b.HasIndex("ClientDataClientId");

                    b.HasIndex("RentCarId");

                    b.ToTable("Price");

                    b.HasData(
                        new
                        {
                            AsigId = 1,
                            Level = 1
                        },
                        new
                        {
                            AsigId = 2,
                            Level = 3,
                            NumeAsig = "Asigurare Basic"
                        });
                });

            modelBuilder.Entity("RentCars.Data.ClientData", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("IdNumber");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("Phone");

                    b.HasKey("ClientId");

                    b.ToTable("ClientDatas");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            Address = "Aleea Eprubetei 21-23",
                            City = "Bucuresti",
                            Email = "marin.cezar45@gmail.com",
                            FirstName = "Cezar",
                            IdNumber = "963747",
                            LastName = "Marin",
                            Phone = "0755356570"
                        },
                        new
                        {
                            ClientId = 2,
                            Address = "Aleea Eprubetei 21-23",
                            City = "Bucuresti",
                            Email = "marin.irina@gmail.com",
                            FirstName = "Irina",
                            IdNumber = "963748",
                            LastName = "Marin",
                            Phone = "0755356570"
                        });
                });

            modelBuilder.Entity("RentCars.Data.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("Address3");

                    b.Property<string>("CityTown");

                    b.Property<string>("Country");

                    b.Property<string>("PostalCode");

                    b.Property<string>("StateProvince");

                    b.Property<string>("VenueName");

                    b.HasKey("LocationId");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            Address1 = "Calea Bucurestilor 210",
                            CityTown = "Otopeni",
                            Country = "ROU",
                            PostalCode = "12345",
                            StateProvince = "IF",
                            VenueName = "Otopeni Auto"
                        });
                });

            modelBuilder.Entity("RentCars.Data.Rent", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LocationId");

                    b.Property<string>("Marca");

                    b.Property<string>("Model");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Zile");

                    b.HasKey("CarId");

                    b.HasIndex("LocationId");

                    b.ToTable("Rents");

                    b.HasData(
                        new
                        {
                            CarId = 1,
                            LocationId = 1,
                            Marca = "Volkswagen",
                            Model = "Golf",
                            StartDate = new DateTime(2020, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Zile = 1
                        });
                });

            modelBuilder.Entity("RentCars.Data.Asigurare", b =>
                {
                    b.HasOne("RentCars.Data.ClientData", "ClientData")
                        .WithMany()
                        .HasForeignKey("ClientDataClientId");

                    b.HasOne("RentCars.Data.Rent", "Rent")
                        .WithMany("Price")
                        .HasForeignKey("RentCarId");
                });

            modelBuilder.Entity("RentCars.Data.Rent", b =>
                {
                    b.HasOne("RentCars.Data.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
